x <- 1
x
print(x)
msg <- "hello"
print(msg)
msg
## This is a comment
x <- ## nothing
msg
msg
x
x <- 1:20
x
msg.length()
msg.length
length(msg)
class(msg)
attributes(msg)
number <- 1
class(number)
number2 <- 1l
numberian <- 1l
numberian <- l1
numberian <- 1L
class(numberian)
y <- c(TRUE, 2)
y
y <- c(TRUE, "a")
y
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
R.version.string
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9 , 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R, "mytest2.R"")
file.rename("mytest.R, "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(0, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Gustavo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
play()
my_data
ls
ls()
nxt()
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 < c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
vect2
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:10
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
bye()
swirl()
library(swirl)
swirl()
?Devices
R(faithful, plot(eruptions, waiting))
R(faithful, plot(eruptions, waiting))
R(faithful, plot(eruptions, waiting))asdf
r(faithful, plot(eruptions, waiting))
asdf
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(states)
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data="state", c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airmiles)
boxplot(Ozone~Month, airquality)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
boxplot(Ozone~Month, airquality)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality,xlab="Month", ylab="Ozone (ppb)", col.ax)
boxplot(Ozone~Month, airquality,xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality,xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red", main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Ozone and Wind in New York City")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue", pch=1)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=2)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, w=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4,
| 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
title(mtext="Ozone and Weather in New York City", outer=TRUE)
mtitle("Ozone and Weather in New York City", outer=TRUE)
mtext("Ozone and Weather in New York City", outer=TRUE)
bye
bye()
quit()
swirl()
library(swirl)
swirl
swirl()
quit
quit()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x,newClust, mean)
tapply(y,newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y, pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red", "green"), pch=3, cex=3, lwd=3)
kmeans(dataFrame, centers=6)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red", "green"), pch=3, cex=3, lwd=3)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heapmap(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*diag*t(matv)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd$v)
a1 <- (svd1$u[,1]) * (svd1$d[1]) %*% t(svd$v)
a1 <- (svd1$u[,1]) * (svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1]) * (svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1]) * (t(svd1$d[1]) %*% svd1$v
)
a1 <- (svd1$u[,1]) * (t(svd1$d[1])) %*% svd1$v
svd1$u[,1] * svd1$d[1] %*% t(svd1$v)
(svd1$u[,1] * svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd$v)
maxCon <- which.max(svd$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[,-2], centers=6)
kClust <- kmeans(sub1, centers=6)
kClust <- kmeas(sub1[,-2], centers=6)
kClust <- kmenas(sub1[,-(2)], centers=6)
kClust <- kmeans(sub1[,-(2)], centers=6)
kClust <- kmeans(sub1[,-2], centers=6)
kClust <- kmeans(sub1[,1:2], centers=6)
kClust <- kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(KClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
exit
exit()
quit()
swirl()
library(swirl)
library(swirl())
swirl()
exit
quit()
head(activity)
setwd("~/workspace_personal/datascience/datasciencecoursera/reproductible-research/week4")
unlink('week4project_cache', recursive = TRUE)
destFile="storm-data.csv.bz2"
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if (!file.exists(destFile)) {
download.file(fileURL, destFile, method="auto")
}
setwd("~/workspace_personal/datascience/datasciencecoursera/reproductible-research/week4")
install.library("gridExtra")
library.install("gridExtra")
install.packages("gridExtra")
